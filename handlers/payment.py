from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.payment import PaymentService
import os
import uuid

router = Router()
payment_service = PaymentService()

class PaymentStates(StatesGroup):
    waiting_for_payment_type = State()
    waiting_for_payment_confirmation = State()

@router.message(Command("premium"))
async def cmd_premium(message: Message, state: FSMContext):
    premium_price = float(os.getenv('PREMIUM_PRICE', '299'))
    await message.answer(
        "üöÄ <b>Premium</b>\n\n"
        "‚è≥ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 4\n"
        "‚ú® –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç\n"
        "üî• –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ\n"
        "üíé –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–º–∞–∑–∞ –≤ —Ç–æ–ø–µ –∫–∞—Ä—Ç–æ—á–µ–∫\n"
        "‚ö° –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è ‚Ä¢ 30 –¥–Ω–µ–π\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞:</b>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="Telegram Stars", callback_data="pay_stars"),
                    InlineKeyboardButton(text="CryptoBot", callback_data="pay_crypto"),
                ],
                [
                    InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π ({premium_price}‚ÇΩ)", callback_data="buy_premium_rub"),
                ]
            ]
        ),
        parse_mode="HTML"
    )
    await state.set_state(PaymentStates.waiting_for_payment_confirmation)

@router.message(Command("coins"))
async def cmd_coins(message: Message, state: FSMContext):
    coins_price = float(os.getenv('COINS_PRICE', '99'))
    await message.answer(
        f"ü™ô –ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {coins_price} ‚ÇΩ\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 –º–æ–Ω–µ—Ç\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–æ–Ω–µ—Ç—ã?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data="buy_coins"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
                ]
            ]
        )
    )
    await state.set_state(PaymentStates.waiting_for_payment_confirmation)

@router.callback_query(F.data.startswith("buy_"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    payment_type = callback.data.split("_")[1]
    order_id = str(uuid.uuid4())
    
    if payment_type == "premium":
        amount = float(os.getenv('PREMIUM_PRICE', '299'))
        description = "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π"
    else:
        amount = float(os.getenv('COINS_PRICE', '99'))
        description = "–ü–æ–∫—É–ø–∫–∞ 100 –º–æ–Ω–µ—Ç"
    
    payment_link = await payment_service.create_payment_link(
        amount=amount,
        description=description,
        order_id=order_id,
        success_url=f"https://t.me/{callback.message.chat.username}?start=payment_success_{order_id}",
        fail_url=f"https://t.me/{callback.message.chat.username}?start=payment_fail_{order_id}"
    )
    
    if payment_link:
        await callback.message.answer(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_link}\n\n"
            f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{order_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
                    ]
                ]
            )
        )
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    order_id = callback.data.split("_")[2]
    payment_status = await payment_service.check_payment_status(order_id)
    
    if payment_status and payment_status.get('status') == 'SUCCESS':
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞ –∏–ª–∏ –º–æ–Ω–µ—Ç
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
    else:
        await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()

@router.callback_query(F.data == "buy_premium_rub")
async def process_rub_payment(callback: CallbackQuery, state: FSMContext):
    order_id = str(uuid.uuid4())
    amount = float(os.getenv('PREMIUM_PRICE', '299'))
    description = "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π"
    payment_link = await payment_service.create_payment_link(
        amount=amount,
        description=description,
        order_id=order_id,
        success_url=f"https://t.me/{callback.message.chat.username}?start=payment_success_{order_id}",
        fail_url=f"https://t.me/{callback.message.chat.username}?start=payment_fail_{order_id}"
    )
    if payment_link:
        await callback.message.answer(
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_link}\n\n"
            f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{order_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
                    ]
                ]
            )
        )
    else:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear() 