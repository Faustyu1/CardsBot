import os
import random
import sys

import aiogram
from aiogram.filters import ChatMemberUpdatedFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.group import get_group, in_group_change, set_comments_active
from database.promo import get_promo, promo_use
from filters import CardFilter
from utils.kb import get_bonus_keyboard

sys.path.insert(0, sys.path[0] + "..")
import re
from datetime import datetime, timedelta
import emoji
import sqlalchemy
from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import ChatMemberUpdated, InlineKeyboardButton, Message
from aiogram_dialog import DialogManager
from aiogram.enums.parse_mode import ParseMode
from aiogram.utils.text_decorations import markdown_decoration

sys.path.append(os.path.realpath('.'))
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER
from database.cards import get_all_cards
from database.models import Card
from database.user import add_card, add_coins, add_points, change_username, check_last_get, get_coins, get_luck, get_user, \
    in_pm_change, set_luck, update_last_get, is_nickname_taken, IsAlreadyResetException
from database.premium import check_premium
from middlewares import RegisterMiddleware
from filters.FloodWait import RateLimitFilter
from utils.loader import bot
from data.text import forbidden_symbols, settings_chat, name_card
import validators


text_triggers_router = Router()
text_triggers_router.my_chat_member.middleware(RegisterMiddleware())


@text_triggers_router.message(CardFilter(), RateLimitFilter(1.0))
async def komaru_cards_function(msg: Message, dialog_manager: DialogManager):
    user_id = msg.from_user.id
    user = await get_user(user_id)
    now = datetime.now()
    is_premium = await check_premium(user.premium_expire)
    if not await check_last_get(user.last_usage, is_premium):
        hours = 3 if is_premium else 4
        next_available = user.last_usage + timedelta(hours=hours)
        remaining = next_available - now
        
        hours_left = int(remaining.total_seconds() // 3600)
        minutes_left = int((remaining.total_seconds() % 3600) // 60)
        seconds_left = int(remaining.total_seconds() % 60)
        
        time_parts = []
        if hours_left > 0:
            time_parts.append(f"{hours_left} —á–∞—Å–æ–≤")
        if minutes_left > 0:
            time_parts.append(f"{minutes_left} –º–∏–Ω—É—Ç")
        if seconds_left > 0:
            time_parts.append(f"{seconds_left} —Å–µ–∫—É–Ω–¥")
        time_string = " ".join(time_parts)
        
        await msg.reply(
            "–û—Å–º–æ—Ç—Ä–µ–≤—à–∏—Å—å, –≤—ã –Ω–µ –Ω–∞—à–ª–∏ <b>–ö–∞—Ä—Ç—É</b> –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ ü§∑‚Äç‚ôÇÔ∏è\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ <b>{time_string}</b>, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", 
            parse_mode=ParseMode.HTML
        )
        return
    chosen_cat: Card = await random_cat(is_premium, user_id)
    description_text = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {chosen_cat.description}" if chosen_cat.description else ""

    if user.check_bonus_available():
        bonus_message = (
            "üéÅ –ü–æ–ª—É—á–∞–π <b>–∫–∞—Ä—Ç–æ—á–∫—É</b> —Ä–∞–∑ –≤ 4 —á–∞—Å–∞ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"
        )
        markup = await get_bonus_keyboard((await msg.bot.get_me()).username, msg.from_user.id)
    else:
        bonus_message = ""
        markup = None

    if chosen_cat.id in user.cards:
        coins = random.randint(2, 5)
        coins_db = await get_coins(user.telegram_id)
        await bot.send_photo(
            msg.chat.id,
            photo=chosen_cat.photo,
            caption=f"üåü –ö–∞—Ä—Ç–æ—á–∫–∞ ¬´<b>{chosen_cat.name}</b>¬ª —É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å"
                    f"\n\nüíé –†–µ–¥–∫–æ—Å—Ç—å: <b>{chosen_cat.rarity}</b>\n "
                    f"‚ú® –û—á–∫–∏: +<b>{chosen_cat.points}</b> [{user.points + int(chosen_cat.points)}]\n"
                    f"üí∞ –ú–æ–Ω–µ—Ç—ã ‚Ä¢ +{coins} [{coins_db + coins}]\n"
                    f"{description_text}\n\n"
                    f"{bonus_message}",
            reply_to_message_id=msg.message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=markup
        )
        await add_coins(user.telegram_id, int(coins), username=msg.from_user.username, in_pm=(msg.chat.type == "private"))
    else:
        coins = random.randint(5, 8)
        coins_db = await get_coins(user.telegram_id)
        await bot.send_photo(
            msg.chat.id,
            photo=chosen_cat.photo,
            caption=f"üëª –£—Å–ø–µ—Ö! –ö–∞—Ä—Ç–æ—á–∫–∞ ¬´<b>{chosen_cat.name}</b>¬ª"
                    f"\n\nüíé –†–µ–¥–∫–æ—Å—Ç—å: <b>{chosen_cat.rarity}</b>\n "
                    f"‚ú® –û—á–∫–∏: +<b>{chosen_cat.points}</b> [{user.points + int(chosen_cat.points)}]\n"
                    f"üí∞ –ú–æ–Ω–µ—Ç—ã ‚Ä¢ +{coins} [{coins_db + coins}]\n"
                    f"{description_text}\n"
                    f"{bonus_message}",
            reply_to_message_id=msg.message_id,
            parse_mode=ParseMode.HTML,
            reply_markup=markup
        )
        await add_coins(user.telegram_id, int(coins), username=msg.from_user.username, in_pm=(msg.chat.type == "private"))
        await add_card(user.telegram_id, chosen_cat.id)

    await update_last_get(user.telegram_id)
    await add_points(user.telegram_id, int(chosen_cat.points))


@text_triggers_router.message(Command("name"))
@text_triggers_router.message(F.text.casefold().startswith("—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫".casefold()))
async def change_nickname(message: types.Message, dialog_manager: DialogManager):
    user_id = message.from_user.id
    user = await get_user(user_id)
    first_name = message.from_user.first_name
    premium_status = await check_premium(user.premium_expire)

    if message.text.startswith('/name'):
        command_parts = message.text.split(maxsplit=1)
        if len(command_parts) == 1: 
            await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name.")
            return
        new_nick = command_parts[1].strip()
    else:
        parts = message.text.casefold().split('—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫'.casefold(), 1)
        if len(parts) > 1 and parts[1].strip():
            new_nick = parts[1].strip()
        else:
            await message.reply("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return

    if 5 > len(new_nick) or len(new_nick) > 32:
        await message.reply("–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    if any(emoji.is_emoji(char) for char in new_nick):
        if not premium_status:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –Ω–∏–∫–µ. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
            return
    else:
        if not re.match(r'^[\w .,!?#$%^&*()-+=/\]+$|^[\w .,!?#$%^&*()-+=/–∞-—è—ë–ê-–Ø–Å]+$', new_nick):
            await message.reply("–ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ/—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, "
                              "—Ü–∏—Ñ—Ä—ã –∏ –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏.")
            return

    if '@' in new_nick or validators.url(new_nick) or 't.me' in new_nick:
        await message.reply("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª '@', —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è t.me.")
        return

    if await is_nickname_taken(new_nick):
        await message.reply("–ù–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç")
        return

    try:
        await change_username(user.telegram_id, new_nick)
    except sqlalchemy.exc.IntegrityError as e:
        await message.reply("–ù–∏–∫–Ω–µ–π–º –∑–∞–Ω—è—Ç")
        return
        
    await message.reply(f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_nick}")


@text_triggers_router.message(F.text.casefold().startswith("–ø—Ä–æ–º–æ".casefold()))
async def activate_promo(message: types.Message, dialog_manager: DialogManager):
    promocode = message.text.casefold().split('–ø—Ä–æ–º–æ'.casefold(), 1)[1].strip()
    promo = await get_promo(promocode)
    if promo is None:
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")
        return
    if promo.is_expiated_counts():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–æ.")
        return
    if promo.is_expiated_time():
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫.")
        return
    try:
        channel_member = await message.bot.get_chat_member(promo.channel_id, message.from_user.id)
    except Exception:
        await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞")
    if channel_member.status not in ["creator", "administrator", "member", "restricted"]:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å",
                             reply_markup=InlineKeyboardBuilder(
                                 InlineKeyboardButton(text="–ö–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞", url=promo.link)
                             ).as_markup())
        return
    user = await get_user(message.from_user.id)
    if user.check_promo_expired(promocode):
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        return
    try:
        await promo_use(user.telegram_id, promo)
        await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except IsAlreadyResetException:
        await message.answer("–¢–∞–π–º–µ—Ä —É–∂–µ –Ω–∞ –Ω—É–ª–µ, –∑–∞–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É, –∞ –∑–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.")


@text_triggers_router.my_chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_bot_added(update: ChatMemberUpdated):
    if update.chat.type == "private":
        await in_pm_change(update.from_user.id, True)
    elif update.chat.type in ["group", "supergroup"]:
        await in_group_change(update.chat.id, True)
        await update.answer(
            f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ö–∞—Ä—Ç–æ—á–µ–∫!
    
üåü –°–æ–±–∏—Ä–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.
    
–ö–∞–∫ –Ω–∞—á–∞—Ç—å:
1. –ù–∞–ø–∏—à–∏—Ç–µ "{name_card}" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏.
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.
    
    –£–¥–∞—á–∏ –≤ –Ω–∞—à–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π!"""
        )


@text_triggers_router.my_chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_bot_deleted(update: ChatMemberUpdated):
    if update.chat.type == "private":
        await in_pm_change(update.from_user.id, False)
    elif update.chat.type in ["group", "supergroup"]:
        await in_group_change(update.chat.id, False)


def is_nickname_allowed(nickname):
    for symbol in forbidden_symbols:
        if re.search(re.escape(symbol), nickname, re.IGNORECASE):
            return False
    return True


async def random_cat(isPro: bool, user_id: int):
    cats = await get_all_cards()
    has_luck = await get_luck(user_id)

    if isPro:
        chances = {
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 25,
            "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 20,
            "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": 20,
            "–†–µ–¥–∫–∞—è": 35,
        }
    else:
        chances = {
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 14,
            "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 15,
            "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": 20,
            "–†–µ–¥–∫–∞—è": 51,
        }

    if has_luck:
        luck_bonus = 10
        chances["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è"] += luck_bonus
        chances["–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è"] += luck_bonus
        chances["–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è"] += luck_bonus
        chances["–†–µ–¥–∫–∞—è"] += luck_bonus
        await set_luck(user_id, False)

    total = sum(chances.values())
    normalized_chances = {k: (v / total) * 100 for k, v in chances.items()}

    cumulative = 0
    ranges = {}
    for rarity, chance in normalized_chances.items():
        ranges[rarity] = (cumulative, cumulative + chance)
        cumulative += chance

    random_number = random.uniform(0, 100)

    for rarity, (start, end) in ranges.items():
        if start <= random_number < end:
            eligible_cats = [cat for cat in cats if cat.rarity == rarity]
            if eligible_cats:
                return random.choice(eligible_cats)

    rare_cats = [cat for cat in cats if cat.rarity == "–†–µ–¥–∫–∞—è"]
    if rare_cats:
        return random.choice(rare_cats)
    
    return '—á–∏–≤–æ'


@text_triggers_router.message(Command("settings"))
async def settings(msg: types.Message, dialog_manager: DialogManager):
    settings = await get_group(int(msg.chat.id))
    status_text = "‚úÖ" if settings.comments_on else "‚ùå"
    print(f"Settings from DB: {settings.comments_on}")
    builder = InlineKeyboardBuilder().add(
        InlineKeyboardButton(
            text=f"{status_text} –ê–≤—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",
            callback_data=f"settings:toogle:{msg.from_user.id}"
        ),
    )
    await msg.answer(settings_chat, reply_markup=builder.as_markup(), parse_mode=ParseMode.HTML)

@text_triggers_router.callback_query(F.data.startswith("settings:"))
async def settings_callback(callback: types.CallbackQuery):
    user_id = callback.data.split(":")[-1]
    if int(user_id) != callback.from_user.id:
        await callback.answer("–ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return

    settings = await get_group(callback.message.chat.id)
    if settings:
        
        new_status = not settings.comments_on
        await set_comments_active(callback.message.chat.id, new_status)
        updated_settings = await get_group(callback.message.chat.id)
        status_text = "‚úÖ" if updated_settings.comments_on else "‚ùå" 
        
        builder = InlineKeyboardBuilder().add(
            InlineKeyboardButton(
                text=f"{status_text} –ê–≤—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",
                callback_data=f"settings:toogle:{callback.from_user.id}"
            ),
        )
        
        try:
            await callback.message.edit_text(
                settings_chat,
                reply_markup=builder.as_markup(),
                parse_mode=ParseMode.HTML
            )
        except aiogram.exceptions.TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await callback.answer()
            else:
                raise


@text_triggers_router.message()
async def on_any_message(msg: types.Message):
    pass